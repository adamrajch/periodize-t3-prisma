// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
	provider = "prisma-client-js"
	previewFeatures = ["fullTextSearch","fullTextIndex"]
}

datasource db {
	provider = "postgresql" // NOTE: sqlite does not work with NextAuth.js
	url      = env("DATABASE_URL")
}

model Example {
	id String @id @default(cuid())
}

model User {
	id            	String    @id @default(cuid())
	name          	String?
	email         	String?   @unique
	emailVerified 	DateTime?
	image         	String?
	accounts      	Account[]
	sessions      	Session[]
	programs      	Program[]
	exercises		Exercise[]
	templates		Template[]
	activeProgramList	String[]
	activePrograms	ActiveProgram[]
	workouts				Workout[]
	records					Record[]
	role			Role	@default(User)
}	

enum Role {
	User
	ADMIN
}

model Program{
	id          String  @id @default(uuid())
	title       String	
	description String?
  author			User	@relation(fields:[authorId], references:[id])
	authorId		String 
	isPublic		Boolean @default(false)
	tags				String[]
	schema			Json
	meta				Json?	 
	createdAt		DateTime	@default(now())
	updatedAt		DateTime 	@updatedAt
	activePrograms	ActiveProgram[]
}

model ActiveProgram{
	id								String  	@id @default(cuid())
	user							User		@relation(fields:[userId], references: [id])
	userId						String
	createdAt					DateTime	@default(now())
	updatedAt					DateTime 	@updatedAt
	title							String
	summary						String?
	programSchema			Json
	currentWorkout 		Json?
	nextWorkout				Json?
	lastWorkout				Json?
	program 					Program @relation(fields: [programId], references: [id])
	programId					String
	schema						Json

	numberOfDays 			Int	
	currentDayIndex 	Int	@default(0)
	timesCompleted 		Int	@default(0)
	workouts					WorkoutsOnPrograms[]
	records						RecordsOnPrograms[]
}

model Workout{
	id					String  	@id @default(cuid())
	createdAt		DateTime	@default(now())
	updatedAt		DateTime 	@updatedAt
	schema			Json
	user				User		@relation(fields:[userId], references: [id])
	userId			String
	program			WorkoutsOnPrograms[]
	records			Record[]
}

model WorkoutsOnPrograms {
	program			ActiveProgram		@relation(fields:[programId], references: [id])
	programId		String
	workout			Workout	@relation(fields:[workoutId], references: [id])
	workoutId		String
	assignedAt 	DateTime @default(now())

	@@id([programId, workoutId])
}


model Record{
	id					String  	@id @default(cuid())
	createdAt		DateTime	@default(now())
	updatedAt		DateTime 	@updatedAt
	name				String
	sets				Int
	reps				Int
	rpe					Int?
	percentage	Int?
	time				Int?
	weight			Json?
	distance		Json?
	user				User		@relation(fields:[userId], references: [id])
	userId			String
	workout			Workout @relation(fields:[workoutId], references: [id])
	workoutId		String
	programs		RecordsOnPrograms[]
	// exercise	ActiveProgram	@relation(fields:[programId], references: [id])
	// exerciseId	String
}

model RecordsOnPrograms {
	program			ActiveProgram		@relation(fields:[programId], references: [id])
	programId		String
	record			Record	@relation(fields:[recordId], references: [id])
	recordId		String
	assignedAt 	DateTime @default(now())

	@@id([programId, recordId])
}

model Template{
	id          String  @id @default(uuid())
	title       String
	description String?
	createdAt   DateTime    @default(now())
	updatedAt		DateTime 	@updatedAt
	user			User		@relation(fields:[userId], references: [id])		
	userId		String	
}

model Exercise{
	id			String  	@id @default(cuid())
	name		String		@unique
	category	String[]
	load		Boolean 
	distance	Boolean 
	time		Boolean 
	createdAt   DateTime    @default(now())
	user		User		@relation(fields:[userId], references: [id])		
	userId		String	
}

 
// Necessary for Next auth
model Account {
	id                String  @id @default(cuid())
	userId            String
	type              String
	provider          String
	providerAccountId String
	refresh_token     String?
	refresh_token_expires_in  Int?
	access_token      String?
	expires_at        Int?
	token_type        String?
	scope             String?
	id_token          String?
	session_state     String?
	user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

	@@unique([provider, providerAccountId])
}

model Session {
	id           String   @id @default(cuid())
	sessionToken String   @unique
	userId       String
	expires      DateTime
	user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
	identifier String
	token      String   @unique
	expires    DateTime

	@@unique([identifier, token])
}
